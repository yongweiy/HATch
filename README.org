#+exclude_tags: pandoc
#+options: ^:{}

This is the artifact of /Derivative-Guided Symbolic Execution/ under
submission to POPL 2025.  The derivative-guided symbolic execution
engine *HATch*, along with its derivative-free variant, are provided.
Please follow the instructions below for installation and reproduction
of experiment results.

* Getting Started

We recommend the use of machines with at least 8 GB memory -- *HATch*
raises errors when memory usage exceeds 8GB.  All experiments were
performed on AMD Ryzen 7 PRO 6850U with 32 GB RAM.  The artifact is
provided as a [[https://docs.docker.com/get-docker/][Docker]] image.  Before proceeding, try =docker run
hello-world= to ensure that Docker works as intended.

You may either load the pre-built docker image:

#+begin_src shell
  docker load < ../hatch.tar.gz
#+end_src

or build the docker image on your own:

#+begin_src shell
  docker build . --tag hatch
#+end_src


To install *HATch* manually, one may create an OCaml compiler switch,
activate the environment in the current shell, install dependencies,
and build the artifact, as follows:

#+begin_src shell
  opam switch -y create hatch 4.14.0+flambda
  eval $(opam env)
  opam install -y containers core core_unix ppx_jane ppx_inline_test ppx_assert ppx_sexp_conv ppx_optcomp ppx_hash ppx_compare ppx_let yojson dolog ocolor z3 qcheck choice oseq ocamlgraph
  dune build
#+end_src

* Falsify Individual ADT implementations
#+PROPERTY: header-args:shell :results verbatim code :prologue exec 2>&1 :epilogue true

Folder =data/ri= stores various benchmarks in its subfolders, each
corresponding to an abstract data type (ADT) and its underlying
stateful representation type.  Specifically, Each subfolder contains

- a safety property represented by a symbolic regular expression in
  =ri.ml=
- the implementation of one or more methods of the ADT, both correct
  (without =_buggy= postfix) and buggy (with =_buggy= postfix)
- the refinement-type-style specification that manifest the safety
  properties and accompany the implementation in the same file


See [[*Experiments]] for the complete list of methods associated with each
pair of ADT and its representation type.

One may run *HATch* on the implementation of buggy methods like
=Stack_LinkedList/remove_aux= (in place of =${bench}=) as follows:

#+name: hatch
#+begin_src shell :var bench="" :post get_time(str="fail", out=*this*)
  timeout -v 1m _build/default/bin/main.exe symb-exec meta-config.json data/ri/${bench}_buggy.ml -empty-aware -exec-bound 20 -eff-append-bound 5
#+end_src

In seconds, *HATch* falsifies the implementation by finding an execution path with

- =Phi= : the path condition collected along the execution path
- =Trace= : the trace of symbolic events that witness the execution
  path
- =R_cont= : a symbolic regular expression accepting traces that the
  execution can produce without violating the safety property 
- =expr= : the term under execution
  
#+call: hatch[:post]("LinkedList_KVStore/remove_aux")

#+RESULTS:
#+begin_src shell
[1mPreemptive Hatch[0m
Phi    = _a2_0:{v:Ptr.t | true}, _a1_0:{v:Ptr.t | true}, hd:{v:Ptr.t | Â¬is_nullptr _a2_0}, vl:{v:Elem.t | true}, _a_3:{v:Ptr.t | true}, next_2:{v:Ptr.t | v == _a_3}, x_26_2:{v:bool | Â¬v}, _a_6:{v:Elem.t | true}, x_27_2:{v:Elem.t | v == _a_6}, x_28_2:{v:bool | (v <=> x_27_2 == vl) âˆ§ v}, _a_9:{v:Ptr.t | true}, x_29_2:{v:Ptr.t | v == _a_9}
Trace  = âŸ¨putNext x_0 x_1 = vret | x_0 == _a1_0 âˆ§ x_1 == _a2_0 âˆ§ Â¬(x_0 == hd âˆ§ x_1 == _a_3) âˆ§ x_0 == next_2 âˆ§ x_1 == _a_9âŸ©; âŸ¨putNext x_0 x_1 = vret | Â¬(x_0 == _a1_0 âˆ§ x_1 == _a2_0) âˆ§ Â¬x_0 == _a1_0 âˆ§ x_0 == hd âˆ§ x_1 == _a_3 âˆ§ Â¬(x_0 == next_2 âˆ§ x_1 == _a_9) âˆ§ Â¬x_0 == next_2âŸ©; âŸ¨putVal x_0 x_1 = vret | x_0 == next_2 âˆ§ x_1 == _a_6âŸ©; âŸ¨getNext x_0 = vret | vret == _a_3 âˆ§ x_0 == hdâŸ©; âŸ¨getVal x_0 = vret | vret == _a_6 âˆ§ x_0 == next_2âŸ©; âŸ¨getNext x_0 = vret | vret == _a_9 âˆ§ x_0 == next_2âŸ©; âŸ¨putNext x_0 x_1 = vret | x_0 == hd âˆ§ x_1 == x_29_2 âˆ§ Â¬((Â¬(Â¬x_0 == _a1_0 âˆ§ x_1 == _a2_0) âˆ§ Â¬(Â¬x_1 == _a2_0 âˆ§ x_0 == _a1_0)) âˆ¨ (Â¬(Â¬x_0 == _a1_0 âˆ§ x_1 == _a2_0) âˆ§ Â¬x_1 == _a2_0 âˆ§ x_0 == _a1_0))âŸ©
R_cont = âˆ…
expr   =
(let (f_1 : unit) = (() : unit) in (f_1 : unit) : unit)
DT(LinkedList)  Task 1(remove_aux): exec time 1.803346(s), check failed
#+end_src

In this case, =Phi= and =Trace= together are satisfiable -- the
associated state is reachable -- and =R_cont= is empty.  Therefore,
*HATch* determines that the execution path is falsified.

The derivative-free variant of =HATch= can be run as follows:

#+name: naive
#+begin_src shell :var bench="" :post get_time(str="fail", out=*this*)
  timeout -v 1m _build/default/bin/main.exe symb-exec meta-config.json data/ri/${bench}_buggy.ml -no-deriv -exec-bound 20
#+end_src

And it times out after 1 minute.
#+call: naive[:post]("LinkedList_KVStore/remove_aux")

#+RESULTS:
#+begin_src shell
timeout: sending signal TERM to command â€˜duneâ€™
#+end_src

We regard prior work on type checking automata-augmented refinement
type as the baseline verifier, which can be run as follows:

#+name: verify
#+begin_src shell :var bench="" :post get_time(str="fail", out=*this*)
  timeout -v 1m _build/default/bin/main.exe ri-type-check meta-config.json data/ri/${bench}_buggy.ml
#+end_src

The verifier also times out after 1 minute.
#+call: verify[:post]("LinkedList_KVStore/remove_aux")

#+RESULTS:
#+begin_src shell
timeout: sending signal TERM to command â€˜duneâ€™
#+end_src

* Post-Processing Scripts :pandoc:

Given the output stored in =out=, we use the following scripts (in Emacs
Lisp) to extract relevant information.

#+name: get_time
#+begin_src elisp :var str="fail" out="" :results output
  (let ((last-line (car (last (split-string out "\n" t)))))
    (cond
     ((string-match "timeout" last-line) (princ "T/O"))
     ((string-match "Out of memory" last-line) (princ "O/M"))
     ((string-match str last-line)
      (let ((start (string-match "exec time" out))
            (end (string-match "(s)" out)))
        (princ (format "%.2f" (string-to-number (substring out (+ start 10) end))))))
     (t (princ "N/A")))
    (terpri))
#+end_src

We use the following script to compute the speedup of *HATch*.

#+name: ratio
#+begin_src elisp :var x="" y=""
  (if (string-match-p "^[0-9]+\\.?[0-9]*$" x) (format "\\times%.1f" (/ (string-to-number x) (string-to-number y))) x)
#+end_src

* Experiments

The following table lists all methods whose buggy implementation are
falsified by *HATch* (first column).  The next three columns are also
illustrated in Table 1 of the paper while the last two columns are
omitted.

|-------------------------------------+---------+---------+----------+----------+----------|
| <l>                                 |     <r> |     <r> |      <r> |      <r> |      <r> |
| ADT_ReprType/method                 |   HATch |   Naive | SpeedUp/ | Verifier | SpeedUp/ |
|                                     | time(s) | time(s) |    Naive |  time(s) | Verifier |
|-------------------------------------+---------+---------+----------+----------+----------|
| Stack_LinkedList/cons               |    0.29 |    0.91 |     \times3.1 |     1.03 |     \times3.6 |
| Stack_LinkedList/concat_aux         |    0.17 |    7.40 |    \times43.5 |     2.08 |    \times12.2 |
| Stack_KVStore/cons                  |    0.76 |   10.87 |    \times14.3 |     3.20 |     \times4.2 |
| Stack_KVStore/concat_aux            |    0.58 |     T/O |      T/O |     3.85 |     \times6.6 |
| Queue_LinkedList/append             |    0.49 |    1.21 |     \times2.5 |     1.25 |     \times2.6 |
| Queue_Graph/append                  |    1.11 |   14.45 |    \times13.0 |     8.15 |     \times7.3 |
| Set_KVStore/insert                  |    0.56 |   24.97 |    \times44.6 |     0.79 |     \times1.4 |
| Set_Tree/insert_aux                 |    0.70 |    3.33 |     \times4.8 |     7.75 |    \times11.1 |
| Heap_LinkedList/insert_aux          |    0.07 |    0.90 |    \times12.9 |     0.92 |    \times13.1 |
| Heap_Tree/insert_aux                |    0.64 |    1.52 |     \times2.4 |     1.58 |     \times2.5 |
| MinSet_Set/minset_singleton         |    0.72 |    0.91 |     \times1.3 |     0.92 |     \times1.3 |
| MinSet_Set/minset_insert            |    0.82 |    8.09 |     \times9.9 |     7.89 |     \times9.6 |
| MinSet_KVStore/minset_singleton     |    0.42 |    7.53 |    \times17.9 |     1.78 |     \times4.2 |
| MinSet_KVStore/minset_insert        |    1.17 |   13.23 |    \times11.3 |    18.22 |    \times15.6 |
| LazySet_Tree/insert_aux             |    0.70 |    3.32 |     \times4.7 |     7.82 |    \times11.2 |
| LazySet_Set/lazy_insert             |    0.31 |    0.40 |     \times1.3 |     0.42 |     \times1.4 |
| LazySet_KVStore/insert_aux          |    0.56 |   25.37 |    \times45.3 |     0.79 |     \times1.4 |
| DFA_KVStore/add_transition          |    0.41 |   12.59 |    \times30.7 |    12.59 |    \times30.7 |
| DFA_KVStore/del_transition          |    0.66 |    9.95 |    \times15.1 |     9.93 |    \times15.0 |
| DFA_Graph/add_transition            |    0.64 |    8.00 |    \times12.5 |     8.75 |    \times13.7 |
| DFA_Graph/del_transition            |    1.19 |   11.63 |     \times9.8 |    10.28 |     \times8.6 |
| ConnectedGraph_Set/singleton        |    0.18 |   54.51 |   \times302.8 |     2.82 |    \times15.7 |
| ConnectedGraph_Set/add_node         |    0.83 |     O/M |      O/M |     8.31 |    \times10.0 |
| ConnectedGraph_Set/add_transition   |    0.91 |     O/M |      O/M |    10.29 |    \times11.3 |
| ConnectedGraph_Graph/singleton      |    0.72 |    1.28 |     \times1.8 |     1.25 |     \times1.7 |
| ConnectedGraph_Graph/add_node       |    1.25 |    7.65 |     \times6.1 |     7.61 |     \times6.1 |
| ConnectedGraph_Graph/add_transition |    1.50 |   23.93 |    \times16.0 |    31.09 |    \times20.7 |
| ColoredGraph_Graph/add_edge         |    2.31 |     T/O |      T/O |      T/O |      T/O |
| ColoredGraph_KVStore/add_edge       |    4.88 |     T/O |      T/O |      T/O |      T/O |
| LinkedList_KVStore/remove_aux       |    4.98 |     T/O |      T/O |      N/A |      N/A |
|-------------------------------------+---------+---------+----------+----------+----------|
#+TBLFM: $3='(org-sbe "naive" (bench $$1))::$2='(org-sbe "hatch" (bench $$1))::$5='(org-sbe "verify" (bench $$1))::$4='(org-sbe "ratio" (x $$3) (y $$2))::$6='(org-sbe "ratio" (x $$5) (y $$2))

The data in the table is produced using [[https://orgmode.org/worg/org-contrib/babel/][org-babel shipped with Emacs]].
With a recent installation of *Emacs* (for scripting) and *pandoc* (for
conversion to markdown), one may rerun all experiments (takes about 20
minutes on AMD Ryzen 7 PRO 6850U) and regenerate this file, including
the above table, using the following shell commands.

#+begin_src shell :results silent
  emacs --batch -l ob -l ob-shell --eval "
    (let ((org-confirm-babel-evaluate nil))
      (dolist (file command-line-args-left)
	(with-current-buffer (find-file-noselect file)
	  (org-table-recalculate-buffer-tables)
	  (save-buffer))))
  " README.org
  pandoc -s README.org --to=gfm -o README.md
#+end_src


